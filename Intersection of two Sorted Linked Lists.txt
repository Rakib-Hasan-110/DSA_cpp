#include <bits/stdc++.h>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node(int val)
    {
        data = val;
        next = NULL;
    }
};

Node* findIntersection(Node* head1, Node* head2)
{
    Node *p1 = head1, *p2 = head2;
    Node *head = NULL, *tail = NULL;

    // Traverse both linked lists and find the common nodes
    while (p1 && p2) {
        if (p1->data > p2->data) {

            // Nodes don't match, move to the next node in
            // the list with the smaller value
            p2 = p2->next;
        }
        else if (p2->data > p1->data) {

            // Nodes don't match, move to the next node in
            // the list with the smaller value
            p1 = p1->next;
        }
        else {

            // Nodes match, add the common node to the
            // intersection list
            if (head == NULL) {
                head = tail = new Node(p1->data);

                // Create a new head for the intersection
                // list
            }
            else {

                // Append the new node to the end of the
                // intersection list
                tail->next = new Node(p1->data);
                tail = tail->next;
            }

            // Move to the next nodes in both lists
            p1 = p1->next;
            p2 = p2->next;
        }
    }

    return head;
}


int main()
{
    // Create the first linked list
    Node* head1 = new Node(1);
    head1->next = new Node(2);
    head1->next->next = new Node(3);
    head1->next->next->next = new Node(4);
    head1->next->next->next->next = new Node(6);

    // Create the second linked list
    Node* head2 = new Node(2);
    head2->next = new Node(4);
    head2->next->next = new Node(6);
    head2->next->next->next = new Node(8);

    // Find the intersection of the two linked lists
    Node* result = findIntersection(head1, head2);

    // Print the intersection list
    while (result) {
        cout << result->data << " ";
        result = result->next;
    }
    cout << endl;

    return 0;
}
