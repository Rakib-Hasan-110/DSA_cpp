#include <iostream>
using namespace std;

class Node {
  public:
    int data;
    Node *next;
    Node *prev;

    Node(int x) {
        data = x;
        next = nullptr;
        prev = nullptr;
    }
};

// Function to delete a node before a given 
// node in a doubly linked list
Node *deleteBefore(Node *head, int key) {
    Node *curr = head;

    // Find the node with the given key
    while (curr != nullptr) {
        if (curr->data == key)
            break;
        curr = curr->next;
    }

    // If curr is nullptr or curr->prev is nullptr,
      // there is no node to delete
    if (curr == nullptr || curr->prev == nullptr)
        return head;

    // Node to be deleted
    Node *nodeDelete = curr->prev;

    // Update the prev of the current node
      // to the prev of the node to be deleted
    curr->prev = nodeDelete->prev;

    // If nodeDelete's prev is not nullptr,
      // update its next pointer to the current node
    if (nodeDelete->prev != nullptr) {
        nodeDelete->prev->next = curr;
    }
    else {
        // If nodeDelete is the head node
        head = curr;
    }

    // Free the memory of the node to be deleted
    delete nodeDelete;
    return head;
}

void printList(Node *head) {
    Node *curr = head;
    while (curr != nullptr)
    {
        cout << curr->data << " ";
        curr = curr->next;
    }
    cout << endl;
}

int main() {
  
    // Create a hardcoded doubly linked list:
    // 1 <-> 2 <-> 3 <-> 4
    Node *head = new Node(1);
    head->next = new Node(2);
    head->next->prev = head;
    head->next->next = new Node(3);
    head->next->next->prev = head->next;
    head->next->next->next = new Node(4);
    head->next->next->next->prev = head->next->next;

    head = deleteBefore(head, 3);
    printList(head);

    return 0;
}
